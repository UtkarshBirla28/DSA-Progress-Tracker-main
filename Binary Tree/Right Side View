class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        solve(root, ans, 0);
        return ans;
    }

    public static void solve(TreeNode root, List<Integer> ans, int levelIndex){
        if(root == null){
            return;
        }

        if(levelIndex == ans.size()){
        ans.add(root.val); 
        }

        solve(root.right, ans, levelIndex+1);
        solve(root.left, ans, levelIndex+1);
}
        // Can also be solved through level order traversal approach, 
        // just add the last element of every level to the answer list.
        /*
         List<Integer> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();

        if(root == null) return ans;

        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        q.add(null);

        while(!q.isEmpty()){
            TreeNode t = q.remove();

            if(t == null){
                ans.add(temp.get(temp.size()-1)); //last element of temp i.e. last element of every level
                temp.clear();

                if(!q.isEmpty()) q.add(null); // level seperator
            }
            else{
                temp.add(t.val);

                if(t.left != null) q.add(t.left);
                if(t.right != null) q.add(t.right);
            }
        }

        return ans;
         */
}
