//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;

public class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out=new PrintWriter(System.out);
        
        int t = Integer.parseInt(in.readLine().trim());
        while (t-- > 0)
        {
            int n = Integer.parseInt(in.readLine().trim());
            int A[] = new int[n];
            String s[]=in.readLine().trim().split(" ");
            for (int i = 0;i < n;i++)
            {
                A[i] = Integer.parseInt(s[i]);
            }
            int key = Integer.parseInt(in.readLine().trim());
            
            out.println(new Solution().search(A, 0, n - 1, key));
        }
        out.close();
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution
{    public static int findPivot(int A[], int l, int h)
    {
        int start=l;
        int end=h;
        
        int mid=start+(end-start)/2;
        
        while(start<end)
        {
            
            
            if(A[0]>A[mid])
            {
                end=mid;
            }
            else
            {
                start=mid+1;
            }
             mid=start+(end-start)/2;
        }
        return start;
    }
    
    int findIndex(int A[],int l,int h,int key)
    {
        int start=l;
        int end=h;
        int mid  = start+(end-start)/2;
        
        while(start<=end)
        {
            
            
            if(A[mid]==key)
            {
                return mid;
            }
            else if(A[mid]>key)
            {
                end=mid-1;
            }
            else
            {
                start=mid+1;
            }
             mid  = start+(end-start)/2;
        }
        return -1;
        
    }
    int search(int A[], int l, int h, int key)
    {
        // l: The starting index
        // h: The ending index, you have to search the key in this range
        // Complete this function
        
         int pivot=findPivot(A,l,h);
        
        if(key>=A[pivot] && key<=A[h])
        {
            return findIndex(A,pivot,h,key);
        }
        else
        {
            return findIndex(A,0,pivot-1,key);
        }
        
    }
}
