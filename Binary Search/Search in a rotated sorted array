class Solution {
    public int search(int[] nums, int target) {
         int peak = findPeak(nums);
         int length=nums.length-1;
         
         
         if(peak==-1)
         {
           return searchArray(nums, target, 0, length);
         }
         if(nums[peak]==target)
         {
           return peak;
         }
         if(target>=nums[0])
         {
         return searchArray(nums, target, 0, peak-1);
             
         }
         return searchArray(nums, target, peak+1, length);

    }

    

      static int findPeak(int arr[])
    {
        int s=0;
        int e=arr.length-1;

        while(s<=e)
        {
            int mid=s+(e-s)/2;
            if(mid<e && arr[mid]>arr[mid+1])
            {
              return mid;
            }
            else if(mid > s && arr[mid] < arr[mid-1])
            {
                return mid-1;
            }
            else if (arr[mid]<=arr[s])
            {
              e=mid-1;
            }
            else
            {
              s=mid+1;
            }
            
            
        }
        return -1;
    }

    
    static int searchArray(int arr[],int target,int s,int e)
    {
        int start=s;
        int end=e;
        while(start<=end)
        {
              int mid = start+(end-start)/2;
               if(arr[mid]==target)
               {
                return mid;
               }  
              else if(arr[mid]<target)
              {
                start=mid+1;
              }
              else
              {
                end=mid-1;
              }


        }
        return -1;
    }


}
